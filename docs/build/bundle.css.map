{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Scanner.svelte",
    "../../Device.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Button, {Label, Icon} from '@smui/button';\n\timport Paper, {Title, Subtitle, Content} from '@smui/paper';\n\timport LinearProgress from '@smui/linear-progress';\n\n\timport getLocalIP from './ip-resolv.js';\n\timport { addDevice, clearAllDevices } from '../device/device-manager.js'\n\n\tlet ownIP = \"x.x.x.x\";\n\tlet scanInProgress = false;\n\n\tlet scanCount = {\n\t\tcurrent: 0,\n\t\ttotal: 5, //255,\n\t};\n\n\n\tlet DeviceScanner = {\n\t  init: (ip) => {\n\t\townIP = ip;\n\t\t//DeviceScanner.scanAll();\n\t  },\n\n\t  updateScanCount: (shouldIncrease = false) => {\n\t    if (shouldIncrease == true) {\n\t      scanCount.current++;\n\t    }\n\n\t    if (scanCount.current == scanCount.total) {\n\t\t  scanInProgress = false;\n\t\t  scanCount.current = 0;\n\t    }\n\t  },\n\n\n\t  scanAll: () => {\n\t\tscanInProgress = true;\n\t\tclearAllDevices();\n\n\t\tlet lastIpBlock = ownIP.substring(ownIP.lastIndexOf(\".\")+1);\n\t\tlet baseIp = ownIP.replace(lastIpBlock, \"\");\n\n\t\tscanCount.current = 0;\n\t\tDeviceScanner.updateScanCount(false);\n\n\t\t//for (let i = 2; i < 255; i++) {\n\t\tfor (let i = 120; i < 125; i++) {\n\t\t\tif (i == lastIpBlock) { continue; }\n\t\t\tlet testIP = baseIp + i;\n\t\t\tDeviceScanner.scanSingleIp(testIP);\n\t\t}\n\n\t  },\n\t  scanSingleIp: (ip) => {\n\t    const scanPromise = new Promise((resolve, reject) => {\n\t       // HACK\n\t\t   /**\n\t\t   let timeout = Math.random() * 500;\n\t\t\tif (ip == \"192.168.1.121\") {\n\t\t\t\tsetTimeout(resolve, timeout, ip);\n\t\t\t\t//resolve(ip);\n\t\t\t} else {\n\t\t\t\tsetTimeout(reject, timeout, ip);\n\t\t\t}\n\t\t\t/**/\n\n\t\t  /**/\n\t\t  fetch(\"http://\" + ip + \"/version\")\n\t\t\t.then((response) => { return response.json()})\n\t\t\t.then((versionJSON) => { \n\t\t\t\t//console.log(\"VER\", versionJSON);\n\t\t\t\tif (versionJSON.device == \"ESP_home_light\") {\n\t\t\t\t\tversionJSON.ip = ip\n\t\t\t\t\tresolve(versionJSON); \n\t\t\t\t} else {\n\t\t\t\t\treject(ip);\n\t\t\t\t}\n\t\t\t})\n\t        .catch((error) => { reject(ip); });\n\t\t  /**/\n\t    });\n\n\t    scanPromise.then((versionJSONWithIP) => {\n\t      //console.log(\"FOUND home-light device\", ip);\t\t  \n\t\t  DeviceScanner.updateScanCount(true);\n\t\t  addDevice(versionJSONWithIP);\n\t    }).catch((ip) => {\n\t      // this IP is not running a home-light\n\t      // console.log(\"Scanned, but not a home-light device\", ip);\n\t      DeviceScanner.updateScanCount(true);\n\t    });\n\t  }\n\t};\n\n\tgetLocalIP(DeviceScanner.init, true);\n</script>\n\n<div class=\"device-scan-box\">\n<Paper>\n  <Title>Device scan</Title>  \n  <p>\n\tYou can scan the local network for home-light devices (scans last IP block 1-254).\n  </p>\n  <p>\n\tYour IP: {ownIP}\n  </p>\n  <Content>\n\n\t\t<Button on:click={DeviceScanner.scanAll} disabled='{scanInProgress}'>\n\t\t  <Icon class=\"material-icons\">settings_remote</Icon>\n\t\t  <Label>Scan for devices</Label>\n\t\t</Button>\n\n\t\t{#if scanInProgress}\n\t\t    <div>Scanning .. {scanCount.current}/{scanCount.total}</div>\n\t\t\t<LinearProgress indeterminate />\n\t\t{/if}\n\n\t</Content>\n</Paper>\n</div>\n\n\n<style>\n.device-scan-box {\n\tmargin-top: 20px;\n}\n</style>",
    "<script>\n  import { devices } from '../stores.js';\n\n  import Card, {Content, PrimaryAction, Media, MediaContent, Actions, ActionButtons, ActionIcons} from '@smui/card';\n  import Button, {Label} from '@smui/button';\n  import IconButton, {Icon} from '@smui/icon-button';\n  import LinearProgress from '@smui/linear-progress';\n\n  import { createDevice } from './device-manager.js'\n\n  export let deviceConf = createDevice({ip:\"0.0.0.0\", version:\"load\"});\n  \n  let modes = [\n\t\t{ val: \"SINGLECOLOR\", text: `Single color` },\n\t\t{ val: \"SWAP2COLORS\", text: `Color phasing` }\n\t];\n\n  function sendSettings() {\n\t  let url = \"http://\" + deviceConf.ip + \"/settings\"\n\t  url += \"?p=\" + deviceConf.settings.power\n\t  url += \"&c=\" + deviceConf.settings.color1\n\t  url += \"&c2=\" + deviceConf.settings.color2\n\t  url += \"&m=\" + deviceConf.settings.mode\n\t  url += \"&t=\" + deviceConf.settings.time\n\t  fetch(url)\n\t\t.then((response) => { return response.json()})\n\t\t.then((settingsNew) => { console.log(\"settingsNew\", settingsNew); })\n  }\n\n  function togglePower(ev) {\n\t  deviceConf.settings.power = deviceConf.settings.power == \"0\" ? \"1\" : \"0\";\n\t  sendSettings();\n  }\n  function setMode(ev) {\n\t  deviceConf.settings.mode = ev.target.value;\n\t  sendSettings();\n  }\n  function setBaseColor(ev) {\n\t  deviceConf.settings.color1 = ev.target.value.replace(\"#\", \"\");\n\t  sendSettings();\n  }\n  function setSecondColor(ev) {\n\t  deviceConf.settings.color2 = ev.target.value.replace(\"#\", \"\");\n\t  sendSettings();\n  }\n  function setPhaseTime(ev) {\n\t  deviceConf.settings.time = ev.target.value;\n\t  sendSettings();\n  }\n</script>\n\n<div class=\"device-card\">\n<Card>\t\n  <PrimaryAction on:click={() => togglePower()}>\n\t{#if deviceConf.settings.mode == \"SWAP2COLORS\" }\n\t<Media style=\"background: linear-gradient(90deg, #{deviceConf.settings.color1} 0%, #{deviceConf.settings.color2} 100%);\"><br/><br/></Media>\n\t{:else}\n\t<Media style=\"background-color: #{deviceConf.settings.color1}\"><br/><br/></Media>\n\t{/if}\n</PrimaryAction>\n\t<Content class=\"mdc-typography--body2\">\n\t\t<h2 class=\"mdc-typography--headline6\" style=\"margin: 0;\">\n\t\t\t{#if deviceConf.settings.power == \"1\" }\n\t\t\t\t<Icon class=\"material-icons\" style=\"color: orange;\">emoji_objects</Icon>\n\t\t\t{:else}\n\t\t\t\t<Icon class=\"material-icons\">emoji_objects</Icon>\n\t\t\t{/if}\n\t\t\tIP: {deviceConf.ip}\n\t\t</h2>\n\t\t{#if deviceConf.settings.power == \"1\"}\n\n\t\t\t<br/>\n\t\t\t<h3 class=\"mdc-typography--subtitle2\" style=\"margin: 0 0 10px; color: #888;\">\n\t\t\t\t<select on:change=\"{setMode}\" class=\"mode-select\">\n\t\t\t\t\t{#each modes as mode}\n\t\t\t\t\t\t<option value={mode.val} selected={deviceConf.settings.mode == mode.val}>\n\t\t\t\t\t\t\t{mode.text}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t{/each}\n\t\t\t\t</select>\n\t\t\t</h3>\t\t\n\n\t\t\t{#if deviceConf.version == \"load\"}\n\t\t\t\t<div>Loading settings ..</div>\n\t\t\t\t<LinearProgress indeterminate />\n\t\t\t{:else}\n\t\t\t\t<input type=\"color\" value=\"#{deviceConf.settings.color1}\" name=\"c\" class=\"colorpicker\" on:change=\"{setBaseColor}\"/>\n\t\t\t\t{#if deviceConf.settings.mode == \"SWAP2COLORS\" }\n\t\t\t\t\t<input type=\"color\" value=\"#{deviceConf.settings.color2}\" name=\"c2\" class=\"colorpicker\" on:change=\"{setSecondColor}\"/>\n\t\t\t\t\t<br/><br/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Icon class=\"material-icons\">watch_later</Icon>\n\t\t\t\t\t\tPhase time: {deviceConf.settings.time}s\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t<input type=\"range\" value=\"{deviceConf.settings.time}\" min=\"1\" max=\"120\" on:change=\"{setPhaseTime}\"/>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t{/if}\n\t\t{/if}\n\n\t\t<div class=\"device-card-footer\">\n\t\t\t<div>Version: {deviceConf.version}</div>\n\t\t</div>\n\t</Content>\n</Card>\n</div>\n\n<br/>\n\n\n\n<style>\n.mode-select {\n\twidth: 100%;\n}\ninput[type=color] {\n\twidth: 49%;\n\theight: 70px;\n}\ninput[type=range] {\n\twidth: 100%;\n\theight: 30px;\n}\n\n.device-card-footer {\n\tmargin-top: 10px;\n\tcolor: #999;\n\tfont-size: .8em;\n}\n</style>"
  ],
  "names": [],
  "mappings": "AA4HA,gBAAgB,cAAC,CAAC,AACjB,UAAU,CAAE,IAAI,AACjB,CAAC;ACdD,YAAY,eAAC,CAAC,AACb,KAAK,CAAE,IAAI,AACZ,CAAC,AACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,eAAC,CAAC,AAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,AACb,CAAC,AACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,eAAC,CAAC,AAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC,AAED,mBAAmB,eAAC,CAAC,AACpB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,IAAI,AAChB,CAAC"
}